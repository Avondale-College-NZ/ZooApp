// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZooApp.data;

#nullable disable

namespace ZooApp.Migrations
{
    [DbContext(typeof(ZooAppContext))]
    [Migration("20240406180356_data")]
    partial class data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZooApp.Models.Animal", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimalId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Diet")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EnclosureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AnimalId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EnclosureId");

                    b.ToTable("Animal", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalId = 1,
                            Age = 5,
                            Diet = 0,
                            EmployeeId = 1,
                            EnclosureId = 1,
                            Name = "Simba",
                            Sex = 0,
                            Species = "Lion"
                        },
                        new
                        {
                            AnimalId = 2,
                            Age = 10,
                            Diet = 2,
                            EmployeeId = 2,
                            EnclosureId = 2,
                            Name = "Dumbo",
                            Sex = 0,
                            Species = "Elephant"
                        });
                });

            modelBuilder.Entity("ZooApp.Models.AnimalEmployee", b =>
                {
                    b.Property<int>("AnimalEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimalEmployeeId"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("AnimalEmployeeId");

                    b.HasIndex("AnimalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AnimalEmployee", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalEmployeeId = 1,
                            AnimalId = 1,
                            EmployeeId = 1
                        },
                        new
                        {
                            AnimalEmployeeId = 2,
                            AnimalId = 2,
                            EmployeeId = 2
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("EnclosureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EnclosureId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            EnclosureId = 0,
                            HireDate = new DateTime(2024, 4, 7, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(5126),
                            Name = "John Doe",
                            Phone = "123-456-7890",
                            Role = 0,
                            Salary = 50000m
                        },
                        new
                        {
                            EmployeeId = 2,
                            EnclosureId = 0,
                            HireDate = new DateTime(2024, 4, 7, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(5129),
                            Name = "Jane Smith",
                            Phone = "987-654-3210",
                            Role = 1,
                            Salary = 70000m
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Enclosure", b =>
                {
                    b.Property<int>("EnclosureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnclosureId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Habitat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EnclosureId");

                    b.ToTable("Enclosure", (string)null);

                    b.HasData(
                        new
                        {
                            EnclosureId = 1,
                            Capacity = 5,
                            Habitat = "Savannah",
                            Name = "Lion Enclosure"
                        },
                        new
                        {
                            EnclosureId = 2,
                            Capacity = 10,
                            Habitat = "Jungle",
                            Name = "Elephant Enclosure"
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EventId");

                    b.ToTable("Event", (string)null);

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Date = new DateTime(2024, 4, 14, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(4910),
                            Description = "Guided safari tour through the zoo",
                            Name = "Zoo Safari",
                            TicketPrice = 25m
                        },
                        new
                        {
                            EventId = 2,
                            Date = new DateTime(2024, 4, 21, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(4963),
                            Description = "Educational talk on wildlife conservation",
                            Name = "Wildlife Conservation Talk",
                            TicketPrice = 10m
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Ticket", (string)null);

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            DateOfPurchase = new DateTime(2024, 4, 5, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(5466),
                            EventId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            DateOfPurchase = new DateTime(2024, 4, 6, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(5469),
                            EventId = 2,
                            VisitorId = 2
                        });
                });

            modelBuilder.Entity("ZooApp.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.ToTable("Visitor", (string)null);

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            Address = "123 Main St",
                            Email = "alice@example.com",
                            Name = "Alice",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            VisitorId = 2,
                            Address = "456 Elm St",
                            Email = "bob@example.com",
                            Name = "Bob",
                            Phone = "987-654-3210"
                        });
                });

            modelBuilder.Entity("ZooApp.Models.VisitorEventAttendance", b =>
                {
                    b.Property<int>("VisitorEventAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorEventAttendanceId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitorEventAttendanceId");

                    b.HasIndex("EventId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorAttendance", (string)null);

                    b.HasData(
                        new
                        {
                            VisitorEventAttendanceId = 1,
                            EventId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitorEventAttendanceId = 2,
                            EventId = 2,
                            VisitorId = 2
                        });
                });

            modelBuilder.Entity("ZooApp.Models.VisitorLog", b =>
                {
                    b.Property<int>("VisitorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorLogId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateVisited")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitorLogId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorLog", (string)null);

                    b.HasData(
                        new
                        {
                            VisitorLogId = 1,
                            Comments = "Enjoyed the zoo!",
                            DateVisited = new DateTime(2024, 4, 5, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(5602),
                            VisitorId = 1
                        },
                        new
                        {
                            VisitorLogId = 2,
                            Comments = "Great experience!",
                            DateVisited = new DateTime(2024, 4, 6, 6, 3, 56, 180, DateTimeKind.Local).AddTicks(5605),
                            VisitorId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZooApp.Models.Animal", b =>
                {
                    b.HasOne("ZooApp.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Enclosure", "Enclosure")
                        .WithMany("Animals")
                        .HasForeignKey("EnclosureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Enclosure");
                });

            modelBuilder.Entity("ZooApp.Models.AnimalEmployee", b =>
                {
                    b.HasOne("ZooApp.Models.Animal", "Animal")
                        .WithMany("AnimalZooEmployees")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Employee", "Employee")
                        .WithMany("AnimalEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ZooApp.Models.Employee", b =>
                {
                    b.HasOne("ZooApp.Models.Enclosure", "Enclosure")
                        .WithMany("Employees")
                        .HasForeignKey("EnclosureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enclosure");
                });

            modelBuilder.Entity("ZooApp.Models.Ticket", b =>
                {
                    b.HasOne("ZooApp.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Visitor", "Visitor")
                        .WithMany("Tickets")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("ZooApp.Models.VisitorEventAttendance", b =>
                {
                    b.HasOne("ZooApp.Models.Event", "Event")
                        .WithMany("EventAttendances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooApp.Models.Visitor", "Visitor")
                        .WithMany("EventAttendances")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("ZooApp.Models.VisitorLog", b =>
                {
                    b.HasOne("ZooApp.Models.Visitor", "Visitor")
                        .WithMany("VisitorLogs")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("ZooApp.Models.Animal", b =>
                {
                    b.Navigation("AnimalZooEmployees");
                });

            modelBuilder.Entity("ZooApp.Models.Employee", b =>
                {
                    b.Navigation("AnimalEmployees");
                });

            modelBuilder.Entity("ZooApp.Models.Enclosure", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ZooApp.Models.Event", b =>
                {
                    b.Navigation("EventAttendances");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ZooApp.Models.Visitor", b =>
                {
                    b.Navigation("EventAttendances");

                    b.Navigation("Tickets");

                    b.Navigation("VisitorLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
